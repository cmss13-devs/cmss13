/datum/action/xeno_action/activable/weave_bless/use_ability(atom/target)
	var/mob/living/carbon/xenomorph/prime_weaver/self = owner

	if (!action_cooldown_check())
		return FALSE

	if (!self.check_state())
		return FALSE

	if(!(ishuman(target) || isxeno(target)))
		return FALSE

	var/mob/living/carbon/human/target_mob = target
	if(ishuman(target_mob) && !target_mob.allow_gun_usage)
		to_chat(self, SPAN_XENOWARNING("You must target a non believer!"))
		return FALSE

	if (get_dist_sqrd(target_mob, self) > 2)
		to_chat(self, SPAN_XENOWARNING("[target_mob] is too far away!"))
		return FALSE

	if (target_mob.stat == DEAD)
		to_chat(self, SPAN_XENOWARNING("[target_mob] is dead, why would you want to touch them?"))
		return FALSE

	var/datum/hive_status/mutated/weave/nexus = self.hive
	if(!istype(nexus))
		to_chat(self, SPAN_XENOWARNING("You cannot reach The Weave!"))
		return FALSE

	if (!nexus.can_use_energy(plasma_cost))
		to_chat(self, SPAN_XENOWARNING("The Weave is not strong enough here to do that!"))
		return FALSE

	ADD_TRAIT(target_mob, TRAIT_IMMOBILIZED, TRAIT_SOURCE_ABILITY("weave_blessing"))
	if(ishuman(target_mob))
		target_mob.update_xeno_hostile_hud()

	apply_cooldown()

	ADD_TRAIT(self, TRAIT_IMMOBILIZED, TRAIT_SOURCE_ABILITY("weave_blessing"))
	self.anchored = TRUE

	if(!do_after(self, activation_delay, INTERRUPT_ALL | BEHAVIOR_IMMOBILE, BUSY_ICON_HOSTILE))
		REMOVE_TRAIT(self, TRAIT_IMMOBILIZED, TRAIT_SOURCE_ABILITY("weave_blessing"))
		self.anchored = FALSE

		unroot_human(target_mob, TRAIT_SOURCE_ABILITY("weave_blessing"))
		return FALSE

	if(nexus.use_energy(plasma_cost))
		self.visible_message(SPAN_XENOHIGHDANGER("[self] floods [target_mob]'s mind with The Weave!"), SPAN_XENOHIGHDANGER("You flood the mind of [target_mob] with The Weave!"))

		target_mob.apply_effect(get_xeno_stun_duration(target_mob, 0.5), WEAKEN)

		target_mob.WeaveClaim(CAUSE_WEAVER)
	else
		to_chat(self, SPAN_XENOWARNING("The Weave is not strong enough here to do that!"))

	REMOVE_TRAIT(self, TRAIT_IMMOBILIZED, TRAIT_SOURCE_ABILITY("weave_blessing"))
	self.anchored = FALSE

	unroot_human(target_mob, TRAIT_SOURCE_ABILITY("weave_blessing"))

	. = ..()
	self = null
	return TRUE


/datum/action/xeno_action/onclick/weave_heal/use_ability(atom/atom)
	var/mob/living/carbon/xenomorph/self = owner
	if (!action_cooldown_check())
		return FALSE

	if (!self.check_state())
		return FALSE

	var/datum/hive_status/mutated/weave/nexus = self.hive
	if(!istype(nexus))
		to_chat(self, SPAN_XENOWARNING("You cannot reach The Weave!"))
		return FALSE

	self.visible_message(SPAN_XENONOTICE("[self] begins to focus their energy!"), SPAN_XENONOTICE("You start to focus your energies!"))
	if(!do_after(self, 10 SECONDS, INTERRUPT_ALL | BEHAVIOR_IMMOBILE, BUSY_ICON_MEDICAL))
		self.visible_message(SPAN_XENOWARNING("[self] decides not to release their energy."), SPAN_XENOWARNING("You decide not to release your energy."))
		return FALSE

	if(!check_and_use_plasma_owner())
		to_chat(self, SPAN_XENOWARNING("You do not have enough plasma stored to do this. You have [self.plasma_stored]/[plasma_cost]!"))
		return FALSE

	self.visible_message(SPAN_XENONOTICE("[self] radiates healing energies!"), SPAN_XENONOTICE("You release some of your energy into a powerful healing aura!"))

	var/list/target_list = list()
	for(var/mob/living/carbon/possible_target in view(5, self))
		if(possible_target == self || !istype(possible_target) || possible_target.stat == DEAD)
			continue
		target_list += possible_target
	for(var/mob/living/carbon/target in target_list)
		if(HAS_TRAIT(target, TRAIT_WEAVE_SENSITIVE))
			target.heal_limb_damage(heal_amt, heal_amt)
			if(isxeno(target))//Double heals for the xenos
				target.heal_limb_damage(heal_amt, heal_amt)
			to_chat(target, SPAN_XENOBOLDNOTICE("You have been regenerated by the The Weave!"))
			continue

		to_chat(target, SPAN_XENOBOLDNOTICE("You feel a ripple as energies pass over you!"))

	. = ..()
	return TRUE



/datum/action/xeno_action/activable/create_pool/use_ability(atom/A)
	var/mob/living/carbon/xenomorph/X = owner
	if(!X.check_state())
		return FALSE

	if(isstorage(A.loc) || X.contains(A) || istype(A, /atom/movable/screen))
		return FALSE

	var/datum/hive_status/mutated/weave/nexus = X.hive
	if(!istype(nexus))
		to_chat(X, SPAN_WARNING("You cannot reach The Weave!"))
		return FALSE

	//Make sure construction is unrestricted
	if(nexus && nexus.construction_allowed == XENO_NOBODY)
		to_chat(X, SPAN_WARNING("The hive is too weak and fragile to have the strength to design constructions."))
		return FALSE

	var/turf/T = get_turf(A)

	var/area/AR = get_area(T)
	if(isnull(AR) || !(AR.is_resin_allowed))
		if(AR.flags_area & AREA_UNWEEDABLE)
			to_chat(X, SPAN_XENOWARNING("This area is unsuited to host the hive!"))
			return
		to_chat(X, SPAN_XENOWARNING("It's too early to spread the hive this far."))
		return FALSE

	if(T.z != X.z)
		to_chat(X, SPAN_XENOWARNING("This area is too far away to affect!"))
		return FALSE

	if(SSinterior.in_interior(X))
		to_chat(X, SPAN_XENOWARNING("It's too tight in here to build."))
		return FALSE

	if(!X.check_alien_construction(T))
		return FALSE

	if(nexus.hivecore_cooldown)
		to_chat(X, SPAN_WARNING("The weeds are still recovering from the death of the hive core, wait until the weeds have recovered!"))
		return FALSE
	if(nexus.has_structure(XENO_STRUCTURE_WEAVE_POOL) || !nexus.can_build_structure(XENO_STRUCTURE_WEAVE_POOL))
		return FALSE

	if(!X.check_state(TRUE) || !nexus.can_use_energy(plasma_cost))
		return FALSE
	var/structure_type = nexus.hive_structure_types[XENO_STRUCTURE_WEAVE_POOL]
	var/datum/construction_template/xenomorph/structure_template = new structure_type()

	if(!spacecheck(X, T, structure_template))
		return FALSE

	if(!do_after(X, XENO_STRUCTURE_BUILD_TIME, INTERRUPT_NO_NEEDHAND|BEHAVIOR_IMMOBILE, BUSY_ICON_BUILD))
		return FALSE

	if(!spacecheck(X, T, structure_template)) //doublechecking
		return FALSE

	if(nexus.has_structure(XENO_STRUCTURE_WEAVE_POOL))
		if(alert(X, "Are we sure that we want to move the nexus and destroy the old flux pool?", , "Yes", "No") != "Yes")
			return FALSE
		qdel(nexus.hive_location)
	else if(!nexus.can_build_structure(XENO_STRUCTURE_WEAVE_POOL))
		to_chat(X, SPAN_WARNING("We can't build any more [XENO_STRUCTURE_WEAVE_POOL]s for the hive."))
		qdel(structure_template)
		return FALSE

	if(QDELETED(T))
		to_chat(X, SPAN_WARNING("We cannot build here!"))
		qdel(structure_template)
		return FALSE

	if(SSinterior.in_interior(X))
		to_chat(X, SPAN_WARNING("It's too tight in here to build."))
		qdel(structure_template)
		return FALSE

	if(T.is_weedable() < FULLY_WEEDABLE)
		to_chat(X, SPAN_WARNING("\The [T] can't support a [structure_template.name]!"))
		qdel(structure_template)
		return FALSE

	var/obj/effect/alien/weeds/weeds = locate() in T
	if(weeds?.block_structures >= BLOCK_SPECIAL_STRUCTURES)
		to_chat(X, SPAN_WARNING("\The [weeds] block the construction of any special structures!"))
		qdel(structure_template)
		return FALSE

	nexus.use_energy(plasma_cost)
	X.place_construction(T, structure_template)

	return ..()

// XSS Spacecheck

/datum/action/xeno_action/activable/create_pool/proc/spacecheck(mob/living/carbon/xenomorph/X, turf/T, datum/construction_template/xenomorph/tem)
	if(tem.block_range)
		for(var/turf/TA in range(tem.block_range, T))
			if(!X.check_alien_construction(TA, FALSE, TRUE, ignore_nest = TRUE))
				to_chat(X, SPAN_WARNING("We need more open space to build here."))
				qdel(tem)
				return FALSE
		if(!X.check_alien_construction(T, ignore_nest = TRUE))
			to_chat(X, SPAN_WARNING("We need more open space to build here."))
			qdel(tem)
			return FALSE
		var/obj/effect/alien/weeds/alien_weeds = locate() in T
		if(!alien_weeds || alien_weeds.weed_strength < WEED_LEVEL_HIVE || alien_weeds.linked_hive.hivenumber != X.hivenumber)
			to_chat(X, SPAN_WARNING("We can only shape on [lowertext(GLOB.hive_datum[X.hivenumber].prefix)]hive weeds. We must find a hive node or core before we start building!"))
			qdel(tem)
			return FALSE
		if(T.density)
			qdel(tem)
			to_chat(X, SPAN_WARNING("We need empty space to build this."))
			return FALSE
	return TRUE
