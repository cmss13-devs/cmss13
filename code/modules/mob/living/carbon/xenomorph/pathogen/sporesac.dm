/obj/effect/pathogen
	icon = 'icons/mob/pathogen/egg_sacs.dmi'
	density = FALSE
	anchored = TRUE

/obj/effect/pathogen/spore_sac
	name = "spore sacs"
	desc = "They look like clusters of mushroom spores."
	icon_state = "egg_sacs"
	layer = LYING_BETWEEN_MOB_LAYER
	health = 80
	plane = GAME_PLANE
	var/list/spore_triggers = list()
	var/spore_status = SPORES_WAITING
	var/on_fire = FALSE
	var/spore_batch = 1//How many spore clouds have been generated by this sac.
	COOLDOWN_DECLARE(regeneration_timer)

/obj/effect/pathogen/spore_sac/Initialize(mapload, hive)
	. = ..()
	create_spore_triggers()
	addtimer(CALLBACK(src, PROC_REF(deploy_spore_triggers)), 10 SECONDS)

/obj/effect/pathogen/spore_sac/proc/create_spore_triggers()
	for(var/i in 1 to 8)
		spore_triggers += new /obj/effect/spore_sac_trigger(src, src)

/obj/effect/pathogen/spore_sac/proc/deploy_spore_triggers()
	var/i = 1
	var/x_coords = list(-1,-1,-1,0,0,1,1,1)
	var/y_coords = list(1,0,-1,1,-1,1,0,-1)
	var/turf/target_turf
	for(var/trigger in spore_triggers)
		var/obj/effect/spore_sac_trigger/ET = trigger
		target_turf = locate(x+x_coords[i],y+y_coords[i], z)
		if(target_turf)
			ET.forceMove(target_turf)
			i++

/obj/effect/pathogen/spore_sac/proc/hide_spore_triggers()
	for(var/trigger in spore_triggers)
		var/obj/effect/spore_sac_trigger/ET = trigger
		ET.moveToNullspace()

/obj/effect/pathogen/spore_sac/Destroy()
	. = ..()
	for(var/obj/effect/spore_sac_trigger/trigger as anything in spore_triggers)
		trigger.linked_sac = null
		qdel(trigger)
	if(spore_triggers)
		spore_triggers.Cut()
	spore_triggers = null

/obj/effect/pathogen/spore_sac/proc/Burst(kill = TRUE)
	hide_spore_triggers()
	if(kill)
		addtimer(CALLBACK(GLOBAL_PROC, GLOBAL_PROC_REF(qdel), src), 3 SECONDS)
	if(spore_status)
		return

	spore_status = SPORES_DEPLOYING
	addtimer(CALLBACK(src, PROC_REF(release_cloud)), 1 SECONDS)

/obj/effect/pathogen/spore_sac/proc/release_cloud()
	if(!loc || spore_status == SPORES_DEPLOYED)
		return

	icon_state = "egg_sacs_open"
	visible_message(SPAN_WARNING("[src] releases a cloud of spores into the air!"))
	new /obj/effect/pathogen/spore_cloud(loc)
	spore_status = SPORES_DEPLOYED
	addtimer(CALLBACK(src, PROC_REF(reset_spores)), 2 MINUTES)
	COOLDOWN_START(src, regeneration_timer, 2 MINUTES)

	var/area/sac_area = get_area(src)
	if(!sac_area)
		return
	for(var/mob/living/carbon/xenomorph/X in GLOB.living_xeno_list)
		if(X.hivenumber == XENO_HIVE_PATHOGEN)
			to_chat(X, SPAN_XENOMINORWARNING("We sense a spore sac at [sac_area.name] has been triggered!"))

/obj/effect/pathogen/spore_sac/proc/reset_spores()
	icon_state = "egg_sacs"
	spore_status = SPORES_WAITING
	spore_batch++
	if(!COOLDOWN_FINISHED(src, regeneration_timer))
		COOLDOWN_RESET(src, regeneration_timer)

/obj/effect/pathogen/spore_sac/get_examine_text(mob/user)
	. = ..()
	if(spore_status == SPORES_DEPLOYED)
		. += SPAN_RED("It has released it's spores!")
		if(is_pathogen_creature(user))
			. += SPAN_ORANGE("It will regenerate spores in [COOLDOWN_SECONDSLEFT(src, regeneration_timer)] seconds!")

/obj/effect/pathogen/spore_sac/bullet_act(obj/projectile/P)
	..()
	var/ammo_flags = P.ammo.flags_ammo_behavior | P.projectile_override_flags
	if(ammo_flags & (AMMO_XENO))
		return
	health -= P.damage
	healthcheck()
	P.ammo.on_hit_obj(src,P)
	return TRUE

/obj/effect/pathogen/spore_sac/flamer_fire_act()
	hide_spore_triggers()
	visible_message(SPAN_WARNING("[src] vanish in the blaze of fire!"))
	qdel(src)

/obj/effect/pathogen/spore_sac/proc/healthcheck()
	if(health <= 0) //If it's not fire, it's still releasing the cloud.
		Burst(TRUE)

/obj/effect/pathogen/spore_sac/Crossed(atom/movable/crosser)
	HasProximity(crosser)

/obj/effect/pathogen/spore_sac/HasProximity(atom/movable/crosser)
	if(spore_status == SPORES_WAITING)
		if(!can_hug(crosser, XENO_HIVE_PATHOGEN) || isyautja(crosser) || issynth(crosser)) //Predators are too stealthy to trigger the clouds.
			return
		Burst(FALSE)


/obj/effect/pathogen/spore_sac/attackby(obj/item/W, mob/living/user)
	if(health <= 0)
		healthcheck()
		return

	if(W.flags_item & NOBLUDGEON)
		return

	user.animation_attack_on(src)
	if(length(W.attack_verb))
		visible_message(SPAN_DANGER("\The [src] has been [pick(W.attack_verb)] with \the [W][(user ? " by [user]." : ".")]"))
	else
		visible_message(SPAN_DANGER("\The [src] has been attacked with \the [W][(user ? " by [user]." : ".")]"))
	var/damage = W.force

	playsound(src.loc, "alien_resin_break", 25)

	health -= damage
	healthcheck()

	return ATTACKBY_HINT_UPDATE_NEXT_MOVE





//The invisible traps around the sac to tell it there's a mob right next to it.
/obj/effect/spore_sac_trigger
	name = "spore trigger"
	icon = 'icons/effects/effects.dmi'
	anchored = TRUE
	mouse_opacity = MOUSE_OPACITY_TRANSPARENT
	invisibility = INVISIBILITY_MAXIMUM
	var/obj/effect/pathogen/spore_sac/linked_sac

/obj/effect/spore_sac_trigger/New(loc, obj/effect/pathogen/spore_sac/source_sac)
	..()
	linked_sac = source_sac

/obj/effect/spore_sac_trigger/Crossed(atom/movable/crosser)
	if(!linked_sac) //something went very wrong.
		qdel(src)
	else if(linked_sac && (get_dist(src, linked_sac) != 1 || !isturf(linked_sac.loc))) //something went wrong
		forceMove(linked_sac)
	else if(iscarbon(crosser))
		var/mob/living/carbon/C = crosser
		if(linked_sac)
			linked_sac.HasProximity(C)


/obj/effect/pathogen/spore_cloud
	name = "spore cloud"
	icon_state = "motes_air"
	var/inhaling = FALSE
	var/death_timer
	var/list/spore_triggers = list()

/obj/effect/pathogen/spore_cloud/Initialize(mapload, ...)
	. = ..()
	var/airborne_duration = rand(30 SECONDS, 60 SECONDS)
	death_timer = addtimer(CALLBACK(src, PROC_REF(decay)), airborne_duration, TIMER_OVERRIDE|TIMER_STOPPABLE|TIMER_UNIQUE)//Spores only exist for a minute maximum
	create_spore_triggers()
	addtimer(CALLBACK(src, PROC_REF(deploy_spore_triggers)), 1 SECONDS)

/obj/effect/spore_cloud_trigger
	name = "spore cloud trigger"
	icon = 'icons/effects/effects.dmi'
	anchored = TRUE
	mouse_opacity = MOUSE_OPACITY_TRANSPARENT
	invisibility = INVISIBILITY_MAXIMUM
	var/obj/effect/pathogen/spore_cloud/linked_cloud

/obj/effect/spore_cloud_trigger/New(loc, obj/effect/pathogen/spore_cloud/source_cloud)
	..()
	linked_cloud = source_cloud

/obj/effect/spore_cloud_trigger/Crossed(atom/movable/crosser)
	if(!linked_cloud) //something went very wrong.
		qdel(src)
	else if(linked_cloud && (get_dist(src, linked_cloud) != 1 || !isturf(linked_cloud.loc))) //something went wrong
		forceMove(linked_cloud)
	else if(iscarbon(crosser))
		var/mob/living/carbon/human/human_passer = crosser
		if(istype(human_passer) && linked_cloud)
			if(!can_hug(human_passer, XENO_HIVE_PATHOGEN) || issynth(human_passer)) //Predators are too stealthy to trigger the clouds.
				return FALSE
			if(isyautja(human_passer))
				linked_cloud.attempt_yautja_inhale(human_passer)
				return TRUE
			linked_cloud.attempt_inhale(human_passer)
			return TRUE

/obj/effect/pathogen/spore_cloud/Crossed(atom/movable/crosser)
	if(!ishuman(crosser))
		return FALSE
	var/mob/living/carbon/human/human_passer = crosser
	if(!can_hug(human_passer, XENO_HIVE_PATHOGEN) || issynth(human_passer)) //Predators are too stealthy to trigger the clouds.
		return FALSE
	if(isyautja(human_passer))
		if(attempt_yautja_inhale(human_passer))
			return TRUE
		return FALSE
	if(attempt_inhale(human_passer))
		return TRUE
	return FALSE

/obj/effect/pathogen/spore_cloud/proc/attempt_inhale(mob/living/carbon/human/human_passer)
	if(inhaling) // Can't be inhaled by more than one person.
		return FALSE
	if(!can_hug(human_passer, XENO_HIVE_PATHOGEN) || isyautja(human_passer) || issynth(human_passer))
		return FALSE

	inhaling = TRUE

	var/obj/item/mask = human_passer.wear_mask
	var/obj/item/helmet = human_passer.head
	if(mask)
		if(mask.flags_inventory & SPOREPROOF)
			inhaling = FALSE
			return FALSE
		if(prob(80) && (mask.flags_inventory & BLOCKGASEFFECT))
			inhaling = FALSE
			return FALSE
	if(helmet)
		if(helmet.flags_inventory & SPOREPROOF)
			inhaling = FALSE
			return FALSE
		if(prob(80) && (helmet.flags_inventory & BLOCKGASEFFECT))
			inhaling = FALSE
			return FALSE

	var/embryos = 0
	for(var/obj/item/alien_embryo/embryo in human_passer) // already got one, stops doubling up
		if(embryo.hivenumber == XENO_HIVE_PATHOGEN)
			embryos++
		else
			qdel(embryo)
	if(!embryos)
		icon_state = "motes_inject"
		addtimer(CALLBACK(src, PROC_REF(decay)), 1 SECONDS)
		var/obj/item/alien_embryo/embryo = new /obj/item/alien_embryo/bloodburster(human_passer)
		GLOB.player_embryo_list += embryo

		if(human_passer.species)
			human_passer.species.larva_impregnated(embryo)

		human_passer.visible_message(SPAN_HIGHDANGER("[human_passer] inhales [src] as they walk through it!"), SPAN_EFFINGHIGHDANGER("You inhale [src] as you walk through it!"))
		var/area/breath_area = get_area(src)
		if(breath_area)
			notify_ghosts(header = "Infected", message = "[human_passer] has been infected with pathogen spores at [breath_area]!", source = human_passer, action = NOTIFY_ORBIT)
			to_chat(src, SPAN_DEADSAY("<b>[human_passer]</b> has been infected with pathogen spores at \the <b>[breath_area]</b>"))
		else
			notify_ghosts(header = "Infected", message = "[human_passer] has been infected with pathogen spores!", source = human_passer, action = NOTIFY_ORBIT)
			to_chat(src, SPAN_DEADSAY("<b>[human_passer]</b> has been infected with pathogen spores"))
		return TRUE
	inhaling = FALSE
	return FALSE

/obj/effect/pathogen/spore_cloud/proc/attempt_yautja_inhale(mob/living/carbon/human/human_passer)
	if(inhaling) // Can't be inhaled by more than one person.
		return FALSE
	if(!can_hug(human_passer, XENO_HIVE_PATHOGEN) || !isyautja(human_passer))
		return FALSE
	if(!inhaling) // ########### STOPS THE PROC DOING ANYTHING FOR NOW
		return FALSE

	inhaling = TRUE

	var/obj/item/mask = human_passer.wear_mask
	var/obj/item/helmet = human_passer.head
	if(mask)
		if(mask.flags_inventory & SPOREPROOF)
			inhaling = FALSE
			return FALSE
		if(prob(80) && (mask.flags_inventory & BLOCKGASEFFECT))
			inhaling = FALSE
			return FALSE
	if(helmet)
		if(helmet.flags_inventory & SPOREPROOF)
			inhaling = FALSE
			return FALSE
		if(prob(80) && (helmet.flags_inventory & BLOCKGASEFFECT))
			inhaling = FALSE
			return FALSE

	var/embryos = 0
	for(var/obj/item/alien_embryo/embryo in human_passer) // already got one, stops doubling up
		if(embryo.hivenumber == XENO_HIVE_PATHOGEN)
			embryos++
		else
			qdel(embryo)
	if(!embryos)
		icon_state = "motes_inject"
		addtimer(CALLBACK(src, PROC_REF(decay)), 1 SECONDS)

		// TO DO SOMETHING HERE

		human_passer.visible_message(SPAN_DANGER("[human_passer] inhales [src] as they walk through it!"), SPAN_HIGHDANGER("You inhale [src] as you walk through it!"))
		var/area/breath_area = get_area(src)
		if(breath_area)
			notify_ghosts(header = "Infected", message = "[human_passer] has been infected with pathogen spores at [breath_area]!", source = human_passer, action = NOTIFY_ORBIT)
			to_chat(src, SPAN_DEADSAY("<b>[human_passer]</b> has been infected with pathogen spores at \the <b>[breath_area]</b>"))
		else
			notify_ghosts(header = "Infected", message = "[human_passer] has been infected with pathogen spores!", source = human_passer, action = NOTIFY_ORBIT)
			to_chat(src, SPAN_DEADSAY("<b>[human_passer]</b> has been infected with pathogen spores"))
		return TRUE
	inhaling = FALSE
	return FALSE

/obj/effect/pathogen/spore_cloud/flamer_fire_act()
	visible_message(SPAN_WARNING("[src] vanishes in the blaze of fire!"))
	decay()

/obj/effect/pathogen/spore_cloud/proc/decay()
	if(death_timer)
		deltimer(death_timer)
	death_timer = null
	qdel(src)

/obj/effect/pathogen/spore_cloud/Destroy()
	. = ..()
	for(var/obj/effect/spore_cloud_trigger/trigger as anything in spore_triggers)
		trigger.linked_cloud = null
		qdel(trigger)
	if(spore_triggers)
		spore_triggers.Cut()
	spore_triggers = null

/obj/effect/pathogen/spore_cloud/proc/create_spore_triggers()
	for(var/i in 1 to 8)
		spore_triggers += new /obj/effect/spore_cloud_trigger(src, src)

/obj/effect/pathogen/spore_cloud/proc/deploy_spore_triggers()
	var/i = 1
	var/x_coords = list(-1,-1,-1,0,0,1,1,1)
	var/y_coords = list(1,0,-1,1,-1,1,0,-1)
	var/turf/target_turf
	for(var/trigger in spore_triggers)
		var/obj/effect/spore_cloud_trigger/ET = trigger
		target_turf = locate(x+x_coords[i],y+y_coords[i], z)
		if(target_turf)
			ET.forceMove(target_turf)
			i++

/obj/effect/pathogen/spore_cloud/proc/hide_spore_triggers()
	for(var/trigger in spore_triggers)
		var/obj/effect/spore_cloud_trigger/ET = trigger
		ET.moveToNullspace()
