<style>
    body {
        background-color: "#272727";
        min-height: 100vh;
        color: "#FFFFFF";
    }

	.container {
		display: flex;
		flex-direction: row;
		align-items: stretch;
		justify-content: center;
	}

    p {
        margin: 3px;
    }

	h3 {
		color: white;
	}
    
    .border {
        border-style: solid;
        border-color: #e9c183;
		border-width: thin;
    }

	.settings {
		bottom: 0px;
		max-height: 150px;
		max-width: 250px;
	}

	.lower {
		display: flex;
		flex-direction: column;
		overflow-x: hidden;
		margin-top: 10px;
	}

	.target, .reference {
		display: flex;
		flex-direction: row;
		align-items: stretch;
		justify-content: space-between;
	}

	.reference {
		margin-top: 10px;
	}

	.info {
		max-width: 473px;
		padding-right: 20px;
	}

	.infoheader {
		color: #e9c183;
		margin-left: 3px;
	}

	.selection {
		display: flex;
		text-align: center;
		flex-direction: column;
	}

	.propSelection {
		min-width: 311px;
		max-width: 311px;
	}

    .properties {
		display: flex;
        padding: 4px 0px 10px 0px;
        overflow: auto;
		margin-top: 15px;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-around;
		align-items: flex-start;
    }

	.statusbar {
		font: 14px, Inconsolata, monospace;
		background-color: black;
		color: #f9d193;
		width: calc(100vw - 325px);
		padding-left: 3px;
		text-shadow: 0 0 4px #805825;
		margin-right: 5px;
	}

	.menu {
		width: 310px;
		min-height: 100px;
		display: flex;
		flex-wrap: wrap;
		align-items: baseline;
		align-content: space-between;
		justify-content: space-evenly;
	}

	.menuFinalizing {
		flex-direction: column;
	}

	.templateSelection, .templateMenu {
		min-width: 784px;
		max-width: 784px;
		min-height: 50px;
		padding: 0px;
		margin-bottom: 0px;
	}
	.templateSelection{
		justify-content: flex-start;
		margin-top: 0px;
	}

	.templateMenu {
		flex-direction: row;
	}

	.menubutton, .modebutton, .propbutton, .templateButton {
		flex-grow: 1;
		margin: 0px 0px 2px 2px;
		padding: 2px;
	}

	.menubutton, .modebutton {
		max-height: 20px;
		min-height: 20px;
		max-width: 150px;
		min-width: 133px;
	}

	.menubuttonLarge {
		flex-grow: 2;
		min-width: 300px;
		max-width: 303px;
	}

	.propbutton, .templateButton {
		max-height: 20px;
		min-height: 20px;
	}

	.propbutton {
		max-width: 140px;
		min-width: 140px;
	}

	.templateButton {
		min-width: 30px;

	}
	.templateProp {
		min-width: 25px;
		max-width: 784px;
	}
	.templateButton:not(.disabled), .templateProp:not(.disabled){
		cursor: pointer;
	}
	.templateButton:disabled:hover, .templateProp:not(.disabled){
		background: #848484; !important;
	}

	.enabled, menubuttonGreen {
		background-color: #264d2b !important;
	}
	.targetedEnabled {
		background-color: #608abc !important;
	}
	.targetedDisabled {
		background-color: #999999 !important;
	}
	.disabled {
		background-color: #666666 !important;
	}
	.menubuttonRed {
		background-color: #bb0000 !important;
	}

	.menubutton:not(.disabled), .modebutton:not(.selected), .propbutton:not(.selected){
		cursor: pointer;
		background: #40628a;
		text-align: center;
		border: 1px solid #161616;
	}
	.menubutton:not(.disabled):hover, .modebutton:not(.selected):hover, .propbutton:not(.selected):hover{
		background: #507aac;
	}

</style>
<div class="container">
	<div class="border statusbar">
		<b>STATUS: </b>{{:data.status_bar}} 
		<br>
		<b>RESEARCH CREDITS:</b> {{:data.rsc_credits}}
		<br>
		{{if data.mode == 4 }}
			<b>CREATION NAME:</b> {{:data.creation_name}}<br>
			<b>CREATION COST:</b> {{:data.creation_cost}}<br>
			<b>ESTIMATED OVERDOSE LVL:</b> {{:data.od_lvl}} UNITS
		{{else}}
			{{if data.target }}
				<b>TARGET DATA:</b> {{:data.target}}
			{{else}}
				<b>TARGET DATA:</b> NOT FOUND
			{{/if}}
			<br>
			{{if data.reference }}
				<b>REFERENCE DATA:</b> {{:data.reference}}
			{{else}}
				<b>REFERENCE DATA:</b> NOT FOUND
			{{/if}}
			<br>
			<b>ESTIMATED OVERDOSE LVL:</b> {{:data.od_lvl}} UNITS
		{{/if}}
	</div>
	{{if data.simulating }} 
		<div class="menu menuFinalizing">
			{{if data.simulating == 1 && data.mode != 4 }}
				{{:helper.link("FINALIZE", 'alert', {'finalize_simulation' : 1}, (data.recipe_target != null) ? null : 'disabled', 'menubutton menubuttonLarge menubuttonGreen')}}
				{{props data.recipe_targets :target_name:target_id}}
					{{if data.recipe_target == target_id }} 
						{{:helper.link(target_name, 'plusthick', {'set_recipe_target' : target_id}, null, 'modebutton menubuttonLarge enabled')}}
					{{else}}
						{{:helper.link(target_name, 'plusthick', {'set_recipe_target' : target_id}, null, 'modebutton menubuttonLarge')}}
					{{/if}}
				{{/props}}
			{{else}}
				{{:helper.link("STOP", 'cancel', {'stop_simulation' : 1}, undefined, 'menubutton menubuttonLarge menubuttonRed')}}
			{{/if}}
		</div>
	{{else}}
		<div class="menu">
			{{:helper.link("SIMULATE", 'radiation', {'simulate' : 1}, (data.ready) ? null : 'disabled', 'menubutton')}}
			{{:helper.link("AMPLIFY ", 'gear', {'set_mode' : 'amp'}, (data.mode == 1) ? 'selected' : null, 'modebutton')}}
			{{:helper.link("EJECT TARGET", 'eject', {'ejectT' : 1}, data.target ? null : 'disabled', 'menubutton')}}
			{{:helper.link("SUPPRESS", 'gear', {'set_mode' : 'sup'}, (data.mode == 2) ? 'selected' : null, 'modebutton')}}
			{{:helper.link("EJECT REFERENCE", 'eject', {'ejectR' : 1}, data.reference ? null : 'disabled', 'menubutton')}}
			{{:helper.link("RELATE  ", 'gear', {'set_mode' : 'rel'}, (data.mode == 3) ? 'selected' : null, 'modebutton')}}
			{{if data.mode != 4}} 
				{{:helper.link("COMPLEXITY", 'wrench', {'toggle_complexity_editor' : 1}, null, 'menubutton disabled')}}
			{{else}}
				{{if data.complexity_editor }}
					{{:helper.link("COMPLEXITY", 'wrench', {'toggle_complexity_editor' : 1}, null, 'menubutton targetedEnabled')}}
				{{else}}
					{{:helper.link("COMPLEXITY", 'wrench', {'toggle_complexity_editor' : 1}, null, 'menubutton')}}
				{{/if}}
			{{/if}}
			{{:helper.link("CREATE  ", 'gear', {'set_mode' : 'cre'}, (data.mode == 4) ? 'selected' : null, 'modebutton')}}
		</div>
	{{/if}}
	
</div>
<div class="lower">
	<div class="target">
		{{if data.mode != 4 }} 
			<div class="info">
				{{if data.target_property}}
					<h3 class="infoheader">{{:data.property_codings[data.target_property]}} - {{:data.target_property}}</h3>
					<p>
						{{:data.target_info}}
						<br><b>Type: {{:data.target_categories}}</b>
						<br><b>Research Cost: {{:data.property_costs[data.target_property]}}</b>
					</p>
				{{/if}}
			</div>
			<div class="selection propSelection">
				<h1>Target Properties</h1>
				{{if data.target}}
					{{if data.target_property_list }} 
						<div class="properties">
							{{props data.target_property_list :level:property}}
								{{:helper.link('<b>' + data.property_codings[property] + ' Level ' + level + '</b>', null, {'set_target' : property}, (data.target_property == property) ? 'selected' : null, 'propbutton')}}
							{{/props}}
						</div>
					{{else}}
						<span>PROPERTIES CAN NOT BE SIMULATED</span>
					{{/if}}
				{{/if}}
			</div>
		{{else}}
			<div class="selection">
				<div class="selection templateMenu">
					{{if data.complexity_editor }}
						{{:helper.link(data.complexity[0], 'gear', {'set_complexity' : 1}, null, 'menubutton templateButton')}}
						{{:helper.link(data.complexity[1], 'gear', {'set_complexity' : 2}, null, 'menubutton templateButton')}}
						{{:helper.link(data.complexity[2], 'gear', {'set_complexity' : 3}, null, 'menubutton templateButton')}}
					{{else}}
						{{:helper.link('SET LVL', 'gear', {'set_level' : 1}, (data.target_property && data.property_data_list[data.target_property] >= 1) ? null : 'disabled', 'menubutton templateButton')}}
						{{:helper.link('SET NAME', 'gear', {'set_name' : 1}, null, 'templateButton')}}
						{{:helper.link('SET OD', 'gear', {'set_od' : 1}, null, 'templateButton')}}
						{{props data.template_filter :setting:configuration}}
							{{if setting[0] == 1 }} 
								{{:helper.link(configuration, null, {'set_filter' : configuration, 'config_value' : setting[1]}, null, 'modebutton templateButton enabled')}}
							{{else}}
								{{:helper.link(configuration, null, {'set_filter' : configuration, 'config_value' : setting[1]}, null, 'modebutton templateButton')}}
							{{/if}}
						{{/props}}
					{{/if}}
				</div>
				<div class="properties templateSelection">
					{{props data.property_data_list :level:property}}
						{{if data.target_property ==  property}} 
							{{if level > 0 }} 
								{{:helper.link(data.property_codings[property] + ' ' + level, null, {'set_target' : property}, null, 'propbutton templateProp targetedEnabled')}}
							{{else}}
								{{:helper.link(data.property_codings[property] + ' ' + level, null, {'set_target' : property}, null, 'propbutton templateProp targetedDisabled')}}
							{{/if}}
						{{else}}
							{{if level > 0 }} 
								{{:helper.link(data.property_codings[property] + ' ' + level, null, {'set_target' : property}, null, 'propbutton templateProp')}}
							{{else}}
								{{:helper.link(data.property_codings[property] + ' ' + level, null, {'set_target' : property}, null, 'propbutton templateProp disabled')}}
							{{/if}}
						{{/if}}
					{{/props}}
				</div>
			</div>
		{{/if}}
	</div>
	<div class="reference">
		{{if data.mode == 3 }}
			<div class="info">
				{{if data.reference_property }}
					<h3 class="infoheader">{{:data.property_codings[data.reference_property]}} - {{:data.reference_property}}</h3>
					<p>
						{{:data.reference_info}}
						<br><b>Type: {{:data.reference_categories}}</b>
					</p>
				{{/if}}
			</div>
			<div class="selection propSelection">
				<h1>Reference Properties</h1>
				{{if data.reference}}
					{{if data.reference_property_list }}
						<div class="properties">
							{{props data.reference_property_list :level:property}}
								{{:helper.link('<b>' + data.property_codings[property] + ' Level ' + level + '</b>', null, {'set_reference' : property}, (data.reference_property == property) ? 'selected' : null, 'propbutton')}} 
							{{/props}}
						</div>
					{{else}}
						<span>PROPERTIES CAN NOT BE SIMULATED</span>
					{{/if}}
				{{/if}}
			</div>
		{{else}}
			{{if data.mode == 4 }}
				<div class="info">
					{{if data.target_property}}
						<h3 class="infoheader">{{:data.property_codings[data.target_property]}} - {{:data.target_property}}</h3>
						<p>
							{{:data.target_info}}
							<br><b>Type: {{:data.target_categories}}</b>
							<br><b>Value per level: {{:data.property_costs[data.target_property]}}</b>
						</p>
					{{/if}}
				</div>
			{{/if}}
		{{/if}}
	</div>
</div>
